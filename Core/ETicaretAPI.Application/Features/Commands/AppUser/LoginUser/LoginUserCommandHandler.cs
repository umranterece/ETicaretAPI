using System.Security.Authentication;using ETicaretAPI.Application.Abstractions.Token;using ETicaretAPI.Application.DTOs;using ETicaretAPI.Application.Exceptions;using MediatR;using Microsoft.AspNetCore.Identity;namespace ETicaretAPI.Application.Features.Commands.AppUser.LoginUser;public class LoginUserCommandHandler: IRequestHandler<LoginUserCommandRequest, LoginUserCommandResponse>{    private readonly UserManager<Domain.Entities.Identity.AppUser> _userManager;    private readonly SignInManager<Domain.Entities.Identity.AppUser> _signInManager;    private readonly ITokenHandler _tokenHandler;    public LoginUserCommandHandler(UserManager<Domain.Entities.Identity.AppUser> userManager,         SignInManager<Domain.Entities.Identity.AppUser> signInManager,         ITokenHandler tokenHandler)    {        _userManager = userManager;        _signInManager = signInManager;        _tokenHandler = tokenHandler;    }    public async Task<LoginUserCommandResponse> Handle(LoginUserCommandRequest request, CancellationToken cancellationToken)    {        Domain.Entities.Identity.AppUser user= await _userManager.FindByNameAsync(request.UsernameOrEmail);        if (user == null)           user= await _userManager.FindByEmailAsync(request.UsernameOrEmail);        if (user == null)            throw new NotFoundUserException();        var result = await _signInManager.CheckPasswordSignInAsync(user, request.Password, false);        if (result.Succeeded) //Authentication Basarili!        {            //Yetkileri belirlememiz lazim            Token token = _tokenHandler.CreateAccessToken(5);            return new LoginUserSuccessCommandResponse() { Token = token};        }        // else        // {        //     return new LoginUserErrorCommandResponse() { Message = "Hata!"};        // }        throw new AuthenticationException();    }}